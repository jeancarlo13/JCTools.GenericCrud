@using JCTools.GenericCrud.Helpers
@using Microsoft.AspNetCore.Mvc.Localization
@model JCTools.GenericCrud.Models.IListModel
@inject IViewLocalizer Localizer
@inject JCTools.GenericCrud.Services.IViewRenderService RenderingServices

@{
    Layout = Model.LayoutPage;
    ViewData["Title"] = Model.Title;

    Model.NewAction.Url = Url.Action("Create");
    Model.NewAction.UseModals = Model.UseModals;
    Model.DetailsAction.UseModals = Model.UseModals;
    Model.EditAction.UseModals = Model.UseModals;
    Model.DeleteAction.UseModals = Model.UseModals;
    if (Model.UseModals)
    {
        Model.NewAction.OnClientClick = "genericCrud.showModal.call(this)";
        Model.DetailsAction.OnClientClick = Model.NewAction.OnClientClick;
        Model.EditAction.OnClientClick = Model.NewAction.OnClientClick;
        Model.DeleteAction.OnClientClick = Model.NewAction.OnClientClick;
    }
}

<h2>@Model.Title</h2>
<h3>@Model.Subtitle</h2>
    @if (Model.Message != null && !string.IsNullOrWhiteSpace(Model.Message.Text))
    {
        <div class="alert @(Model.Message.CssClass) alert-dismissible">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">Ã—</button>
            @Model.Message.Text
        </div>
    }
    <table class="table table-striped table-condensed table-hover">
        <thead>
            <tr>
                @foreach (var title in Model.Columns)
                {
                    <th>@title</th>
                }
                @if (Model.ShowActionsColumns)
                {
                    <th class="text-center">
                        @Html.Partial("_action", Model.NewAction)
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @{
                var entities = Model.GetData();
                foreach (var item in entities)
                {
                    var key = item.GetKeyValue();
                    var isSelected = key?.Equals(Model.GetId());
                    var classAttribute = isSelected.HasValue && isSelected.Value ? "class=\"active\"" : string.Empty;

                    <tr @Html.Raw(classAttribute)>
                        @foreach (var property in item.VisibleProperties)
                        {
                            if (property.UseCustomView)
                            {
                                <td>@await RenderingServices.RenderViewFor(Model, Html, ViewData, property.Name, item.GetEntity())</td>
                            }
                            else
                            {
                                <td>@item.GetPropertyValue(property)</td>
                            }
                        }
                        @if (Model.ShowActionsColumns)
                        {
                            <td class="text-center">
                                @{
                                    Model.DetailsAction.Url = Url.Action("Details", new { id = key });
                                    Model.EditAction.Url = Url.Action("Edit", new { id = key });
                                    Model.DeleteAction.Url = Url.Action("Delete", new { id = key });
                                }
                                @Html.Partial("_action", Model.DetailsAction)
                                @Html.Partial("_action", Model.EditAction)
                                @Html.Partial("_action", Model.DeleteAction)
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>

    <script src="@(Url.Action("GetScript", new { fileName = "genericCrud"}))"></script>